<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script src="https://cdn.jsdelivr.net/jquery.validation/1.16.0/jquery.validate.min.js"></script>
<script src="https://cdn.jsdelivr.net/jquery.validation/1.16.0/additional-methods.min.js"></script>

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery-validation@1.19.2/dist/jquery.validate.min.js"></script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

<script>
    $(document).ready(function () {
        // Pattern kuralını tanımlama
        $.validator.addMethod("pattern", function(value, element, param) {
            return this.optional(element) || new RegExp(param).test(value);
        }, "Bu alan geçersiz.");

        // Şifre Görünürlük Toggle
        function togglePasswordVisibility(passwordField, toggleButton) {
            $(toggleButton).on('click', function () {
                const type = $(passwordField).attr('type') === 'password' ? 'text' : 'password';
                $(passwordField).attr('type', type);
            });
        }

        togglePasswordVisibility('#password', '#toggle-password');
        togglePasswordVisibility('#confirm_password', '#toggle-confirm-password');

        // Şifre Validasyonu
        const createPw = document.querySelector("#password"),
            confirmPw = document.querySelector("#confirm_password"),
            submitBtn = document.querySelector("#registerButton"),
            usernameInput = document.querySelector("#Username"),
            emailInput = document.querySelector("#Email");

        const lengthReq = document.querySelector("#length");
        const uppercaseReq = document.querySelector("#uppercase");
        const numberReq = document.querySelector("#number");
        const specialReq = document.querySelector("#special");

        // Toastify options
        const toastOptions = {
            duration: 3000,
            gravity: "top",
            position: "right",
            stopOnFocus: true,
            style: {
                background: "linear-gradient(to right, #00b09b, #96c93d)",
            }
        };

        function showToast(message, isError = false) {
            Toastify({
                ...toastOptions,
                text: message,
                style: {
                    background: isError ? "#dc3545" : "#28a745"
                }
            }).showToast();
        }

        function validatePassword(password) {
            let val = password.trim();
            let lengthValid = val.length >= 8;
            let uppercaseValid = /[A-Z]/.test(val);
            let numberValid = /[0-9]/.test(val);
            let specialValid = /[!@@#$%^&*(),.?":{}|<>]/.test(val);

            lengthReq.classList.toggle("valid", lengthValid);
            lengthReq.classList.toggle("invalid", !lengthValid);
            uppercaseReq.classList.toggle("valid", uppercaseValid);
            uppercaseReq.classList.toggle("invalid", !uppercaseValid);
            numberReq.classList.toggle("valid", numberValid);
            numberReq.classList.toggle("invalid", !numberValid);
            specialReq.classList.toggle("valid", specialValid);
            specialReq.classList.toggle("invalid", !specialValid);

            return lengthValid && uppercaseValid && numberValid && specialValid;
        }

        function updateSubmitButtonState() {
            const isValid = validatePassword(createPw.value) && createPw.value === confirmPw.value;
            submitBtn.disabled = !isValid;
        }

        createPw.addEventListener("blur", () => {
            if (createPw.value) {
                validatePassword(createPw.value);
                updateSubmitButtonState();
            }
        });

        confirmPw.addEventListener("blur", () => {
            if (confirmPw.value) {
                updateSubmitButtonState();
            }
        });

        // Form submit olayını manuel olarak yakala
        $("#registerForm").on('submit', function(e) {
            // Önce varsayılan form davranışını engelle
            e.preventDefault();

            // Form geçerliliğini kontrol et
            if (!$(this).valid()) {
                return false;
            }

            // Şifre validasyonunu kontrol et
            if (!validatePassword(createPw.value)) {
                validatePassword(createPw.value);
                return false;
            }

            // Submit butonunu devre dışı bırak
            $(submitBtn).prop('disabled', true).text('Kaydediliyor...');

            // Form verilerini al
            const formData = $(this).serialize();

            // AJAX isteği gönder
            $.ajax({
                type: "POST",
                url: $(this).attr('action'),
                data: formData,
                dataType: 'json',
                contentType: 'application/x-www-form-urlencoded'
            })
            .done(function(response) {
                if (response.success) {
                    showToast('Sisteme başarıyla kayıt oldunuz. Giriş sayfasına yönlendiriliyorsunuz...', false);
                    setTimeout(() => {
                        window.location.href = "/Login/Index";
                    }, 3000);
                } else {
                    showToast(response.message, true);
                    if (response.key) {
                        const errorField = $(`#${response.key}`);
                        errorField.addClass('is-invalid');

                        let feedbackDiv = errorField.next('.invalid-feedback');
                        if (feedbackDiv.length === 0) {
                            errorField.after(`<div class="invalid-feedback">${response.message}</div>`);
                        } else {
                            feedbackDiv.text(response.message);
                        }
                    }
                }
            })
            .fail(function(jqXHR) {
                console.error("Form submission error:", jqXHR);

                if (jqXHR.responseJSON) {
                    showToast(jqXHR.responseJSON.message || 'Kayıt işlemi sırasında bir hata oluştu.', true);

                    if (jqXHR.responseJSON.key) {
                        const errorField = $(`#${jqXHR.responseJSON.key}`);
                        errorField.addClass('is-invalid');
                        errorField.next('.invalid-feedback').text(jqXHR.responseJSON.message);
                    }
                } else {
                    showToast('Kayıt işlemi sırasında bir hata oluştu.', true);
                }
            })
            .always(function() {
                $(submitBtn).prop('disabled', false).text('Kayıt Ol');
            });

            return false;
        });

        // jQuery Validate kuralları
        $("#registerForm").validate({
            rules: {
                Name: {
                    required: true,
                    minlength: 2,
                    pattern: /^[a-zA-ZğüşıöçĞÜŞİÖÇ\s]+$/ // Pattern kuralını kullanma
                },
                Surname: {
                    required: true,
                    minlength: 2,
                    pattern: /^[a-zA-ZğüşıöçĞÜŞİÖÇ\s]+$/
                },
                Email: {
                    required: true,
                    email: true
                },
                Username: {
                    required: true
                },
                Password: {
                    required: true,
                    minlength: 8
                },
                ConfirmPassword: {
                    required: true,
                    equalTo: "#password"
                }
            },
            messages: {
                Name: {
                    required: "Ad alanı zorunludur.",
                    minlength: "Ad en az 2 karakter olmalıdır.",
                    pattern: "Ad alanında sadece harf olabilir"
                },
                Surname: {
                    required: "Soyad alanı zorunludur.",
                    minlength: "Soyad en az 2 karakter olmalıdır.",
                    pattern: "Soyad alanında sadece harf olabilir"
                },
                Email: {
                    required: "E-posta alanı zorunludur.",
                    email: "Lütfen geçerli bir e-posta adresi girin."
                },
                Username: {
                    required: "Kullanıcı adı zorunludur."
                },
                Password: {
                    required: "Şifre alanı zorunludur.",
                    minlength: "Şifre en az 8 karakter olmalıdır."
                },
                ConfirmPassword: {
                    required: " Lütfen şifrenizi tekrar giriniz.",
                    equalTo: "Şifreler eşleşmiyor."
                }
            },
            errorPlacement: function (error, element) {
                showToast(error.text(), true);
            }
        });

        // Diğer event handler'lar
        $("input[name='Name'], input[name='Surname']").on('input', function () {
            const value = $(this).val();
            if (!/^[a-zA-ZğüşıöçĞÜŞİÖÇ\s]*$/i.test(value)) {
                showToast('Ad ve soyad alanlarında sadece harf kullanabilirsiniz.', true);
                $(this).val(value.replace(/[^a-zA-ZğüşıöçĞÜŞİÖÇ\s]/gi, ''));
            }
        });

        // Input alanlarından is-invalid sınıfını kaldır
        $("input[name='Name'], input[name='Surname'], #Username, #Email").on('input', function () {
            $(this).removeClass('is-invalid');
        });
    });
</script>