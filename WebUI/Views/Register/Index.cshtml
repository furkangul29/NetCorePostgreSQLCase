@model CreateUserViewModel
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CRM Kayıt Paneli</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <link rel="stylesheet" href="/css/RegisterIndex/registerIndex.css">
</head>

<body class="form-v4">
    <div class="page-content">
        <div class="form-v4-content">
            <div class="form-left">
                <h2>CRM Sistemi</h2>
                <p class="text-1">CRM projemiz üzerinden işlemlerinizi gerçekleştirebilmek için hızlı ve güvenli bir kayıt işlemi yapın.</p>
                <p class="text-2">Zaten bir hesabınız varsa, <a href="/Login/Index/">buradan giriş yapabilirsiniz.</a></p>
            </div>
            <form id="registerForm" class="form-detail" method="post" action="/Register/Index">
                <h2>Kayıt Formu</h2>
                <input type="hidden" name="Token" value="@Model.Token" />
                <input type="hidden" name="RoleId" value="@Model.RoleId" />
                <div class="form-group">
                    <div class="form-row">
                        <div class="form-row-1">
                            <label for="first_name">Adınız</label>
                            <input type="text" asp-for="Name" id="first_name" class="input-text" required>
                            <span asp-validation-for="Name" class="text-danger"></span>
                        </div>
                        <div class="form-row-1">
                            <label for="last_name">Soyadınız</label>
                            <input type="text" asp-for="Surname" id="last_name" class="input-text" required>
                            <span asp-validation-for="Surname" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="form-row-1">
                        <label for="your_email">Email Adresi</label>
                        <input type="email" asp-for="Email" id="your_email" class="input-text" required>
                        <span asp-validation-for="Email" class="text-danger"></span>
                    </div>
                    <div class="form-row-1">
                        <label for="your_username">Kullanıcı Adınız</label>
                        <input type="text" asp-for="Username" id="your_username" class="input-text" required>
                        <span asp-validation-for="Username" class="text-danger"></span>
                    </div>
                    <div class="form-row">
                        <div class="form-row-1">
                            <label for="password">Şifre</label>
                            <div style="position: relative;">
                                <input type="password" asp-for="Password" id="password" class="input-text" required>
                                <span class="toggle-password" id="toggle-password">👁️</span>
                            </div>
                            <span asp-validation-for="Password" class="text-danger"></span>
                            <ul class="requirements">
                                <li id="length" class="invalid">En az 8 karakter</li>
                                <li id="uppercase" class="invalid">En az 1 büyük harf</li>
                                <li id="number" class="invalid">En az 1 sayı</li>
                                <li id="special" class="invalid">En az 1 özel karakter</li>
                            </ul>
                        </div>
                        <div class="form-row-1">
                            <label for="confirm_password">Şifre Tekrar</label>
                            <div style="position: relative;">
                                <input type="password" asp-for="ConfirmPassword" id="confirm_password" class="input-text" required>
                                <span class="toggle-password" id="toggle-confirm-password">👁️</span>
                            </div>
                            <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="form-row-last">
                        <button type="submit" class="register" style="height:35px" id="registerButton" disabled>Kayıt Ol</button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script src="https://cdn.jsdelivr.net/jquery.validation/1.16.0/jquery.validate.min.js"></script>
    <script src="https://cdn.jsdelivr.net/jquery.validation/1.16.0/additional-methods.min.js"></script>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery-validation@1.19.2/dist/jquery.validate.min.js"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <script>
        $(document).ready(function () {
            // Şifre Görünürlük Toggle
            function togglePasswordVisibility(passwordField, toggleButton) {
                $(toggleButton).on('click', function () {
                    const type = $(passwordField).attr('type') === 'password' ? 'text' : 'password';
                    $(passwordField).attr('type', type);
                });
            }

            togglePasswordVisibility('#password', '#toggle-password');
            togglePasswordVisibility('#confirm_password', '#toggle-confirm-password');

            // Şifre Validasyonu
            const createPw = document.querySelector("#password"),
                confirmPw = document.querySelector("#confirm_password"),
                submitBtn = document.querySelector("#registerButton"),
                usernameInput = document.querySelector("#Username"),
                emailInput = document.querySelector("#Email");

            const lengthReq = document.querySelector("#length");
            const uppercaseReq = document.querySelector("#uppercase");
            const numberReq = document.querySelector("#number");
            const specialReq = document.querySelector("#special");

            function validatePassword(password) {
                let val = password.trim();
                let lengthValid = val.length >= 8;
                let uppercaseValid = /[A-Z]/.test(val);
                let numberValid = /[0-9]/.test(val);
                let specialValid = /[!@@#$%^&*(),.?":{}|<>]/.test(val);

                lengthReq.classList.toggle("valid", lengthValid);
                lengthReq.classList.toggle("invalid", !lengthValid);
                uppercaseReq.classList.toggle("valid", uppercaseValid);
                uppercaseReq.classList.toggle("invalid", !uppercaseValid);
                numberReq.classList.toggle("valid", numberValid);
                numberReq.classList.toggle("invalid", !numberValid);
                specialReq.classList.toggle("valid", specialValid);
                specialReq.classList.toggle("invalid", !specialValid);

                return lengthValid && uppercaseValid && numberValid && specialValid;
            }

            function updateSubmitButtonState() {
                const isValid = validatePassword(createPw.value) && createPw.value === confirmPw.value;
                submitBtn.disabled = !isValid;
            }

            createPw.addEventListener("blur", () => {
                if (createPw.value) {
                    validatePassword(createPw.value);
                    updateSubmitButtonState();
                }
            });

            confirmPw.addEventListener("blur", () => {
                if (confirmPw.value) {
                    updateSubmitButtonState();
                }
            });

            // Toastify options
            const toastOptions = {
                position: 'top-right',
                autoClose: 3000,
                hideProgressBar: false,
                closeOnClick: true,
                pauseOnHover: true,
                draggable: true,
            };

            // Kullanıcı adı ve e-posta kontrolü için fonksiyon
            async function checkUserExists(fieldName, fieldValue) {
                try {
                    const response = await $.ajax({
                        type: "POST",
                        url: 'Register/Index', // Kontrol edilecek endpoint
                        data: { [fieldName]: fieldValue } // Gönderilecek veri
                    });

                    // Başarılı yanıt durumunda
                    return response.Success;
                } catch (error) {
                    console.error("API hatası:", error);
                    return false;
                }
            }

            // Form Validasyonu
            $("#registerForm").validate({
                rules: {
                    Name: {
                        required: true,
                        minlength: 2,
                        pattern: /^[a-zA-ZğüşıöçĞÜŞİÖÇ\s]+$/
                    },
                    Surname: {
                        required: true,
                        minlength: 2,
                        pattern: /^[a-zA-ZğüşıöçĞÜŞİÖÇ\s]+$/
                    },
                    Email: {
                        required: true,
                        email: true
                    },
                    Username: {
                        required: true,
                        remote: {
                            url: 'Register/Index', // Kullanıcı adı kontrol endpoint'i
                            type: "post",
                            data: {
                                username: function () {
                                    return $("#Username").val();
                                }
                            }
                        }
                    },
                    Password: {
                        required: true,
                        minlength: 8
                    },
                    ConfirmPassword: {
                        required: true,
                        equalTo: "#password"
                    }
                },
                messages: {
                    Name: {
                        required: "Ad alanı zorunludur.",
                        minlength: "Ad en az 2 karakter olmalıdır.",
                        pattern: "Ad alanında sadece harf ve boşluk olabilir."
                    },
                    Surname: {
                        required: "Soyad alanı zorunludur.",
                        minlength: "Soyad en az 2 karakter olmalıdır.",
                        pattern: "Soyad alanında sadece harf ve boşluk olabilir."
                    },
                    Email: {
                        required: "E-posta alanı zorunludur.",
                        email: "Lütfen geçerli bir e-posta adresi girin.",
                        remote: "Bu e-posta adresi zaten kullanımda."
                    },
                    Username: {
                        required: "Kullanıcı adı alanı zorunludur.",
                        remote: "Bu kullanıcı adı zaten kullanımda."
                    },
                    Password: {
                        required: "Şifre alanı zorunludur.",
                        minlength: "Şifre en az 8 karakter olmalıdır."
                    },
                    ConfirmPassword: {
                        required: "Şifre tekrar alanı zorunludur.",
                        equalTo: "Şifreler eşleşmiyor."
                    }
                },
                errorPlacement: function (error, element) {
                    // Hataları gösterme
                    Toastify({
                        ...toastOptions,
                        text: error.text(),
                        backgroundColor: '#f8d7da',
                        className: 'error-toast'
                    }).showToast();
                },
                submitHandler: async function (form) {
                    // Şifre kontrolünü tekrar yap
                    if (!validatePassword(createPw.value)) {
                        validatePassword(createPw.value);
                        return false;
                    }

                    // Kullanıcı adı ve e-posta kontrolü
                    const isUsernameValid = await checkUserExists('Username', usernameInput.value.trim());
                    const isEmailValid = await checkUserExists('Email', emailInput.value.trim());

                    // Her iki kontrol de başarılıysa kayıt işlemini başlat
                    if (isUsernameValid && isEmailValid) {
                        $(submitBtn).prop('disabled', true).text('Kaydediliyor...');

                        try {
                            const response = await $.ajax({
                                type: "POST",
                                url: form.action,
                                data: $(form).serialize()
                            });

                            console.log("Kayıt API yanıtı:", response);

                            if (response.Success) { // Başarı durumunu API yanıtınıza göre ayarlayın
                                Toastify({
                                    ...toastOptions,
                                    text: 'Sisteme başarıyla kayıt oldunuz. Giriş sayfasına yönlendiriliyorsunuz...',
                                    backgroundColor: '#c3e6cb',
                                    className: 'success-toast'
                                }).showToast();

                                setTimeout(function () {
                                    window.location.href = "/Login/Index";
                                }, 3000);
                            } else {
                                Toastify({
                                    ...toastOptions,
                                    text: response.Message || 'Kayıt sırasında bir hata oluştu.',
                                    backgroundColor: '#f8d7da',
                                    className: 'error-toast'
                                }).showToast();
                            }
                        } catch (error) {
                            console.error("Kayıt API hatası:", error);
                            const errorMessage = error.responseJSON && error.responseJSON.Message ?
                                error.responseJSON.Message :
                                'Kayıt işlemi sırasında bir hata oluştu.';
                            Toastify({
                                ...toastOptions,
                                text: errorMessage,
                                backgroundColor: '#f8d7da',
                                className: 'error-toast'
                            }).showToast();
                        } finally {
                            $(submitBtn).prop('disabled', false).text('Kayıt Ol');
                        }
                    }
                }
            });

            $("input[name='Name'], input[name='Surname']").on('input', function () {
                const value = $(this).val();
                if (!/^[a-zA-ZğüşıöçĞÜŞİÖÇ\s]*$/i.test(value)) {
                    Toastify({
                        ...toastOptions,
                        text: 'Ad ve soyad alanlarında sadece harf kullanabilirsiniz.',
                        backgroundColor: '#f8d7da',
                        className: 'error-toast'
                    }).showToast();
                    $(this).val(value.replace(/[^a-zA-ZğüşıöçĞÜŞİÖÇ\s]/gi, ''));
                }
            });

            // Input alanlarından is-invalid sınıfını kaldır
            $("input[name='Name'], input[name='Surname'], #Username, #Email").on('input', function () {
                $(this).removeClass('is-invalid');
            });
        });
    </script>






</body>
</html>